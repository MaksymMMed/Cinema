// <auto-generated />
using System;
using Cinema.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241206160347_addLargePosterUrlToMovie")]
    partial class addLargePosterUrlToMovie
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cinema.DAL.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Name = "Cillian Murphy"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Name = "Emily Blunt"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Name = "Matthew McConaughhey"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Name = "Anne Hathaway"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            Name = "Rebecca Ferguson"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82266"),
                            Name = "Johny Depp"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82267"),
                            Name = "Jason Momoa"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.ActorMovie", b =>
                {
                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c3")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c4")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82266"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c5")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82267"),
                            MovieId = new Guid("01ba7a49-ff3b-4138-9aff-3d43df1325a9")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962181"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "497abfa3-03d7-40e7-baf5-46aa5b89a54d",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1FmEvxWKgEhjZPKsHuU27QEz4VIcixEpq/1vNOYh8ACRe8ycaqS/jJwAbXHQIxHw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3989aca2-2a1c-4ff1-b666-b68b8060cec7",
                            Email = "WWhite@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WWHITE@EXAMPLE.COM",
                            NormalizedUserName = "WALTHER WHITE",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+NztFu9OGx53iRxnhE834fEfZ0pdkiujWunca2nyEHXXjCQuBk/fnuZ1p6Ee0KWQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Walther White"
                        },
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962183"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16d2b048-a8bd-4ed2-8996-25050ffca942",
                            Email = "jpink@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JPINK@EXAMPLE.COM",
                            NormalizedUserName = "JESSIE PINKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ96L6TnxhWYP6dkv/tcJgiRUUgoxLCBs7SikkLuCztNoivkcXnyHkobq6oxbfwWYQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jessie Pinkman"
                        },
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962184"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9223ee6e-f121-4891-b576-ae7b2a68c406",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEP56R8ef542GueK3xlelsCwozwRrXHtYLiSEVdVUy8Rq57EURKECUkwv1hXmafX4Ww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Director");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Name = "Christopher Nolan"
                        },
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1002"),
                            Name = "Quentin Tarantino"
                        },
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1003"),
                            Name = "Steven Spielberg"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265"),
                            Name = "Detective"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RowsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hall");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            Capacity = 100,
                            Name = "Hall 1 (Big)",
                            RowsData = "[\r\n     { \"Capacity\": 6, \"PriceMultiplier\": 1 },\r\n     { \"Capacity\": 8, \"PriceMultiplier\": 1.2 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 1.5 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 1.5 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 1.5 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 2 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 2 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 1.5 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 2 },\r\n     { \"Capacity\": 10, \"PriceMultiplier\": 2 }\r\n]"
                        },
                        new
                        {
                            Id = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df42"),
                            Capacity = 50,
                            Name = "Hall 2 (Small)",
                            RowsData = "[\r\n     { \"Capacity\": 8, \"PriceMultiplier\": 1 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 1.2 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 1.6 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 1.6 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 1.6 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 2 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 2 },\r\n     { \"Capacity\": 5, \"PriceMultiplier\": 2 }\r\n]"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("363c2006-3d51-46ea-af49-f40fe7605441"),
                            Amount = 100.00m,
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "admin",
                            CreatedOnUtc = new DateTime(2024, 4, 28, 11, 5, 44, 0, DateTimeKind.Utc),
                            IsPaid = true
                        },
                        new
                        {
                            Id = new Guid("363c2006-3d51-46ea-af49-f40fe7605442"),
                            Amount = 100.00m,
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "admin",
                            CreatedOnUtc = new DateTime(2024, 4, 28, 19, 34, 21, 0, DateTimeKind.Utc),
                            IsPaid = true
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRestriction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LargePosterImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmallPosterImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            AgeRestriction = "R",
                            Description = "Oppenheimer is a 2023 epic biographical thriller film written, directed, and produced by Christopher Nolan.It follows the life of J. Robert Oppenheimer, the American theoretical physicist who helped develop the first nuclear weapons during World War II. Based on the 2005 biography American Prometheus by Kai Bird and Martin J. Sherwin, the film chronicles Oppenheimer's studies, his direction of the Los Alamos Laboratory, and his fall from grace after his 1954 security hearing. Cillian Murphy stars as Oppenheimer, alongside Robert Downey Jr. as the United States Atomic Energy Commission member Lewis Strauss.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Duration = 180,
                            LargePosterImageUrl = "https://images4.alphacoders.com/132/1326785.jpeg",
                            Name = "Oppenheimer",
                            ReleaseDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Oppenheimer_%28film%29.jpg/220px-Oppenheimer_%28film%29.jpg",
                            TrailerUrl = "https://www.youtube.com/watch?v=bK6ldnjE3Y0&pp=ygUTb3BwZW5oZWltZXIgdHJhaWxlcg%3D%3D"
                        },
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            AgeRestriction = "PG-13",
                            Description = "Interstellar is a 2014 epic science fiction film directed, written, and produced by Christopher Nolan and starring Matthew McConaughey, Anne Hathaway,   Jessica Chastain, Bill Irwin, Ellen Burstyn, Michael Caine, and Matt Damon. Set in a dystopian future where humanity is embroiled in a catastrophic blight and    famine, the film follows a group of astronauts who travel through a wormhole near Saturn in search of a new home for humankind.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Duration = 169,
                            LargePosterImageUrl = "https://i.pinimg.com/originals/e9/24/0b/e9240b7c5b29b0fb4aa86304a03287e8.jpg",
                            Name = "Interstellar",
                            ReleaseDate = new DateTime(2014, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg",
                            TrailerUrl = "https://www.youtube.com/watch?v=zSWdZVtXT7E&pp=ygUUaW50ZXJzdGVsbGFyIHRyYWlsZXI%3D"
                        },
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c3"),
                            AgeRestriction = "PG-13",
                            Description = "140 years after a devastating civil war, Earth's population is living underground in a silo due to the effects of the war on the atmosphere. In the silo the Sherrif's wife stumbles upon some prohibited information and is sentenced to go outside and die. A few years later her husband voluntarily follows her. The information they uncovered is stored in a 140+ year old hard-drive. The hard-drive lands in the possession of an engineer. When he is murdered his girlfriend, a fellow engineer, searches for the truth.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1002"),
                            Duration = 120,
                            LargePosterImageUrl = "https://images.wallpapersden.com/image/download/silo-2023-season_bmVsamqUmZqaraWkpJRmbmdlrWZlbWU.jpg",
                            Name = "Silo",
                            ReleaseDate = new DateTime(2019, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://upload.wikimedia.org/wikipedia/uk/thumb/d/d0/Silo_2023.jpg/250px-Silo_2023.jpg",
                            TrailerUrl = "https://youtu.be/8ZYhuvIv1pA?si=zOpNLdrSdlAmkF0V"
                        },
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c4"),
                            AgeRestriction = "PG-13",
                            Description = "Dune is a 2021 epic science fiction film based on the 1965 novel by Frank Herbert.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1002"),
                            Duration = 155,
                            LargePosterImageUrl = "https://www.hdwallpapers.in/download/poster_of_dune_2020_4k_hd_movies-HD.jpg",
                            Name = "Dune",
                            ReleaseDate = new DateTime(2021, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://cdn.europosters.eu/image/1300/122815.jpg",
                            TrailerUrl = "https://www.youtube.com/watch?v=n9xhJrPXop4"
                        },
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c5"),
                            AgeRestriction = "PG-13",
                            Description = "A young blacksmith teams up with an eccentric pirate to save the governor's daughter.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1003"),
                            Duration = 143,
                            LargePosterImageUrl = "https://wallpaperswide.com/download/keira_knightley_pirates_of_the_caribbean_at_worlds_end-wallpaper-1920x1080.jpg",
                            Name = "Pirates of the Caribbean: The Curse of the Black Pearl",
                            ReleaseDate = new DateTime(2003, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://lumiere-a.akamaihd.net/v1/images/p_piratesofthecaribbean_thecurseoftheblackpearl_19642_d1ba8e66.jpeg",
                            TrailerUrl = "https://www.youtube.com/watch?v=naQr0uTrH_s"
                        },
                        new
                        {
                            Id = new Guid("01ba7a49-ff3b-4138-9aff-3d43df1325a9"),
                            AgeRestriction = "TV-MA",
                            Description = "In a dystopian future where humankind has lost its sight, two children with the ability to see are born.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1003"),
                            Duration = 143,
                            LargePosterImageUrl = "https://pics.filmaffinity.com/See_TV_Series-838548891-large.jpg",
                            Name = "See",
                            ReleaseDate = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmallPosterImageUrl = "https://www.kino-teatr.ru/movie/posters/big/8/2/137928.jpg",
                            TrailerUrl = "https://www.youtube.com/watch?v=7Rg0y7NT1gU"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieGenre", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c3"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c4"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c4"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82265")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c5"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        },
                        new
                        {
                            MovieId = new Guid("01ba7a49-ff3b-4138-9aff-3d43df1325a9"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieImageSet", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("MovieImageSet");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            ImagesUrl = "['https://64.media.tumblr.com/03f0f59694430f001d08e9309dc52f2e/f5e1e516dcb80f72-07/s1280x1920/9263ba9178755f24391d9ef5fd6d23c8ba9ab35d.jpg','https://64.media.tumblr.com/5bb66a7e359f0a5fec8a238d73798291/f5e1e516dcb80f72-9b/s1280x1920/5ec8af306838ed682350b62189e31627e578b701.jpg','https://m.media-amazon.com/images/M/MV5BNjI0ZmE0NjMtMzQ5ZS00N2RiLThkYzAtYjExOTc2MjU4ZGMzXkEyXkFqcGc@._V1_.jpg']"
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            ImagesUrl = "['https://edgroom-blogs.s3.ap-south-1.amazonaws.com/202310071805064792540_38983_u23h.jpg','https://thinkinginenglish.blog/wp-content/uploads/2024/09/interstellar-new-poster-wallpaper.jpg','https://media.npr.org/assets/img/2014/11/13/fl-17895r_wide-3696728b9df392e99c72d2f2e352ed91d982f03c.jpg']"
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c3"),
                            ImagesUrl = "['https://www.apple.com/tv-pr/shows-and-films/s/silo/images/season-02/unit-photos/episode-01/photo-020101/Silo_Photo_020101.jpg.photo_modal_show_home_large.jpg','https://miro.medium.com/v2/resize:fit:1400/0*SzLdkt_ctC5AXnUC','https://cdn.mos.cms.futurecdn.net/phChq4QbVMg7JmNpDe8nMf.jpg']"
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c4"),
                            ImagesUrl = "['https://media.vanityfair.com/photos/65bc53b6dbcc8f7a911121f8/master/pass/DUN2-T3-0084r.jpg','https://itc.ua/wp-content/uploads/2024/03/ss_807bdb42cfd6f7dbfabdc1bbf1273609af615b38.1920x1080.jpg']"
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c5"),
                            ImagesUrl = "['https://d23.com/app/uploads/2015/09/1180-x-600-091715_pirates-of-the-caribbean-fav-quotes-1180x600.jpg','https://lumiere-a.akamaihd.net/v1/images/g_piratesofthecaribbean_thecurseoftheblackpearl_disneym_c994a7ff.jpeg?region=1%2C0%2C1298%2C730']"
                        },
                        new
                        {
                            MovieId = new Guid("01ba7a49-ff3b-4138-9aff-3d43df1325a9"),
                            ImagesUrl = "['https://static1.cbrimages.com/wordpress/wp-content/uploads/2019/11/see-feature.jpg','https://images.bauerhosting.com/legacy/media/612d/f171/f03d/2f72/b707/68e4/see-season-2-2.jpg?auto=format&w=1440&q=80']"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MovieId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Comment = "Great movie!",
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "Walther White",
                            CreatedOnUtc = new DateTime(2024, 12, 6, 16, 3, 47, 307, DateTimeKind.Utc).AddTicks(1709),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            Rank = 5
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Comment = "Good movie!",
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "Walther White",
                            CreatedOnUtc = new DateTime(2024, 12, 6, 16, 3, 47, 307, DateTimeKind.Utc).AddTicks(2000),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            Rank = 4
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Session");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be1"),
                            BasePrice = 299.00m,
                            DateUtc = new DateTime(2024, 4, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be2"),
                            BasePrice = 129.00m,
                            DateUtc = new DateTime(2024, 4, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be3"),
                            BasePrice = 349.00m,
                            DateUtc = new DateTime(2024, 4, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be4"),
                            BasePrice = 99.00m,
                            DateUtc = new DateTime(2024, 4, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df42"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AspNetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<int>("SeatIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("HallId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SessionId", "RowIndex", "SeatIndex")
                        .IsUnique();

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f011"),
                            InvoiceId = new Guid("363c2006-3d51-46ea-af49-f40fe7605441"),
                            RowIndex = 3,
                            SeatIndex = 6,
                            SessionId = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be1")
                        },
                        new
                        {
                            Id = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f012"),
                            InvoiceId = new Guid("363c2006-3d51-46ea-af49-f40fe7605442"),
                            RowIndex = 1,
                            SeatIndex = 4,
                            SessionId = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cinema.DAL.Entities.ActorMovie", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ActorMovieFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieActorFK");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Invoice", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", "CreatedBy")
                        .WithMany("Invoices")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("UserInvoiceFK");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieDirectorFK");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieGenre", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Genre", "Genre")
                        .WithMany("MoviesGenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("GenreMovieFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieGenreFK");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieImageSet", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithOne("ImageSet")
                        .HasForeignKey("Cinema.DAL.Entities.MovieImageSet", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieImageSetFK");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Review", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", "CreatedBy")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserReviewFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieReviewFK");

                    b.Navigation("CreatedBy");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SessionHallFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieSessionFK");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Ticket", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", null)
                        .WithMany("Tickets")
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("Cinema.DAL.Entities.Hall", null)
                        .WithMany("Tickets")
                        .HasForeignKey("HallId");

                    b.HasOne("Cinema.DAL.Entities.Invoice", "Invoice")
                        .WithMany("Tickets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("InvoiceTicketsFK");

                    b.HasOne("Cinema.DAL.Entities.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("TicketSessionFK");

                    b.Navigation("Invoice");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.DAL.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.AspNetUser", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reviews");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Genre", b =>
                {
                    b.Navigation("MoviesGenre");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Hall", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Invoice", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.Navigation("ImageSet")
                        .IsRequired();

                    b.Navigation("MovieActors");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieReviews");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
