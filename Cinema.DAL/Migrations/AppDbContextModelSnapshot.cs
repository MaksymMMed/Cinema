// <auto-generated />
using System;
using Cinema.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cinema.DAL.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Name = "Cillian Murphy"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Name = "Emily Blunt"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Name = "Matthew McConaughhey"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Name = "Anne Hathaway"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.ActorMovie", b =>
                {
                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        },
                        new
                        {
                            ActorId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("Director");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Name = "Christopher Nolan"
                        },
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1002"),
                            Name = "Quentin Tarantino"
                        },
                        new
                        {
                            Id = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1003"),
                            Name = "Steven Spielberg"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264"),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("RowsCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hall");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            Capacity = 100,
                            RowsCapacity = "[10,10,10,10,10,10,10,10,10,10]"
                        },
                        new
                        {
                            Id = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df42"),
                            Capacity = 50,
                            RowsCapacity = "[5,5,5,5,5,5,5,5,5,5]"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            Id = new Guid("363c2006-3d51-46ea-af49-f40fe7605441"),
                            Amount = 100,
                            CreateDateUtc = new DateTime(2024, 4, 28, 11, 5, 44, 0, DateTimeKind.Utc),
                            Status = true,
                            TicketId = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f011"),
                            UserId = new Guid("88d6040a-130f-43d4-8bee-1f0074962182")
                        },
                        new
                        {
                            Id = new Guid("363c2006-3d51-46ea-af49-f40fe7605442"),
                            Amount = 100,
                            CreateDateUtc = new DateTime(2024, 4, 28, 19, 34, 21, 0, DateTimeKind.Utc),
                            Status = true,
                            TicketId = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f012"),
                            UserId = new Guid("88d6040a-130f-43d4-8bee-1f0074962182")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgeRestriction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            AgeRestriction = "R",
                            Description = "Oppenheimer is a 2023 epic biographical thriller film written, directed, and produced by Christopher Nolan.It follows the life of J. Robert Oppenheimer, the American theoretical physicist who helped develop the first nuclear weapons during World War II. Based on the 2005 biography American Prometheus by Kai Bird and Martin J. Sherwin, the film chronicles Oppenheimer's studies, his direction of the Los Alamos Laboratory, and his fall from grace after his 1954 security hearing. Cillian Murphy stars as Oppenheimer, alongside Robert Downey Jr. as the United States Atomic Energy Commission member Lewis Strauss.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Duration = 180,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Oppenheimer_%28film%29.jpg/220px-Oppenheimer_%28film%29.jpg",
                            Name = "Oppenheimer",
                            ReleaseDate = new DateTime(2023, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerUrl = "https://www.youtube.com/watch?v=bK6ldnjE3Y0&pp=ygUTb3BwZW5oZWltZXIgdHJhaWxlcg%3D%3D"
                        },
                        new
                        {
                            Id = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            AgeRestriction = "PG-13",
                            Description = "Interstellar is a 2014 epic science fiction film directed, written, and produced by Christopher Nolan and starring Matthew McConaughey, Anne Hathaway,   Jessica Chastain, Bill Irwin, Ellen Burstyn, Michael Caine, and Matt Damon. Set in a dystopian future where humanity is embroiled in a catastrophic blight and    famine, the film follows a group of astronauts who travel through a wormhole near Saturn in search of a new home for humankind.",
                            DirectorId = new Guid("ed9a79d9-fe9d-456e-a0a7-2a028cbe1001"),
                            Duration = 169,
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/en/b/bc/Interstellar_film_poster.jpg",
                            Name = "Interstellar",
                            ReleaseDate = new DateTime(2014, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerUrl = "https://www.youtube.com/watch?v=zSWdZVtXT7E&pp=ygUUaW50ZXJzdGVsbGFyIHRyYWlsZXI%3D"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieGenre", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82263")
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            GenreId = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82264")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieImageSet", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("MovieImageSet");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            ImagesUrl = "['https://64.media.tumblr.com/03f0f59694430f001d08e9309dc52f2e/f5e1e516dcb80f72-07/s1280x1920/9263ba9178755f24391d9ef5fd6d23c8ba9ab35d.jpg','https://64.media.tumblr.com/5bb66a7e359f0a5fec8a238d73798291/f5e1e516dcb80f72-9b/s1280x1920/5ec8af306838ed682350b62189e31627e578b701.jpg']"
                        },
                        new
                        {
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            ImagesUrl = "['https://64.media.tumblr.com/03f0f59694430f001d08e9309dc52f2e/f5e1e516dcb80f72-07/s1280x1920/9263ba9178755f24391d9ef5fd6d23c8ba9ab35d.jpg','https://64.media.tumblr.com/5bb66a7e359f0a5fec8a238d73798291/f5e1e516dcb80f72-9b/s1280x1920/5ec8af306838ed682350b62189e31627e578b701.jpg']"
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MovieId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82261"),
                            Comment = "Great movie!",
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "user",
                            CreatedOnUtc = new DateTime(2024, 4, 29, 10, 3, 18, 229, DateTimeKind.Utc).AddTicks(5577),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1"),
                            Rank = 5
                        },
                        new
                        {
                            Id = new Guid("bbd5c0d3-a45d-490a-b26d-d503b6a82262"),
                            Comment = "Good movie!",
                            CreatedById = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            CreatedByName = "user",
                            CreatedOnUtc = new DateTime(2024, 4, 29, 10, 3, 18, 229, DateTimeKind.Utc).AddTicks(5858),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2"),
                            Rank = 4
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Session");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be1"),
                            DateUtc = new DateTime(2024, 4, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be2"),
                            DateUtc = new DateTime(2024, 4, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be3"),
                            DateUtc = new DateTime(2024, 4, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c1")
                        },
                        new
                        {
                            Id = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be4"),
                            DateUtc = new DateTime(2024, 4, 29, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df42"),
                            MovieId = new Guid("9344f562-ffdc-41c5-bb24-c41c969534c2")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PlaceIndex")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f011"),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df41"),
                            PlaceIndex = 6,
                            RowIndex = 3,
                            SessionId = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be1"),
                            UserId = new Guid("88d6040a-130f-43d4-8bee-1f0074962182")
                        },
                        new
                        {
                            Id = new Guid("9ea79a4c-d3d2-4fdf-b9c4-9f4b71e6f012"),
                            HallId = new Guid("d67b95a0-b12e-4574-b9ec-634b11f8df42"),
                            PlaceIndex = 4,
                            RowIndex = 1,
                            SessionId = new Guid("1f8038c6-2e09-4919-8a40-d4715f176be4"),
                            UserId = new Guid("88d6040a-130f-43d4-8bee-1f0074962182")
                        });
                });

            modelBuilder.Entity("Cinema.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962181"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36d2628d-9cad-4f4e-8043-41bb0b5721c2",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK1OCMiynCD4+4t6y03oL7GuteseyeYSSwEz/shwNCZl5Q2CZSS4AFg8kZ2XH1plwA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("88d6040a-130f-43d4-8bee-1f0074962182"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c50475c-6718-4f96-831b-3d991f207b1f",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAENtWu6FZluXtkwByjnSKpB8eiXDoSt6volgxIxCWO2sNXuGiJ6JIqh0VDF8ArVGE3g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cinema.DAL.Entities.ActorMovie", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ActorMovieFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieActorFK");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Invoice", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Ticket", "Ticket")
                        .WithOne("Invoice")
                        .HasForeignKey("Cinema.DAL.Entities.Invoice", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TicketInvoiceFK");

                    b.HasOne("Cinema.DAL.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("UserInvoiceFK");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieDirectorFK");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieGenre", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Genre", "Genre")
                        .WithMany("MoviesGenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("GenreMovieFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieGenreFK");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.MovieImageSet", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithOne("ImageSet")
                        .HasForeignKey("Cinema.DAL.Entities.MovieImageSet", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieImageSetFK");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Review", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.User", "CreatedBy")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserReviewFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieReviewFK");

                    b.Navigation("CreatedBy");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SessionHallFK");

                    b.HasOne("Cinema.DAL.Entities.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MovieSessionFK");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Ticket", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Hall", "Hall")
                        .WithMany("Tickets")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TicketHallFK");

                    b.HasOne("Cinema.DAL.Entities.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("TicketSessionFK");

                    b.HasOne("Cinema.DAL.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TicketUserFK");

                    b.Navigation("Hall");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Genre", b =>
                {
                    b.Navigation("MoviesGenre");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Hall", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Movie", b =>
                {
                    b.Navigation("ImageSet")
                        .IsRequired();

                    b.Navigation("MovieActors");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieReviews");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Session", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Ticket", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.DAL.Entities.User", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reviews");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
